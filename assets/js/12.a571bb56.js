(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{416:function(a,s,t){"use strict";t.r(s);var e=t(2),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"为什么需要docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要docker"}},[a._v("#")]),a._v(" 为什么需要Docker？")]),a._v(" "),s("blockquote",[s("p",[a._v("使用docker的主要目标是容器化。也就是为你的应用程序提供一致的环境，而不依赖于它运行的主机。 想象一下你是否也会遇到下面这个场景，你在本地开发了你的应用程序，它很可能有很多的依赖环境或包，甚至对依赖的具体版本都有严格的要求，当开发过程完成后，你希望将应用程序部署到web服务器。这个时候你必须确保所有依赖项都安装正确并且版本也完全相同，否则应用程序可能会崩溃并无法运行。如果你想在另一个web服务器上也部署该应用程序，那么你必须从头开始重复这个过程。这种场景就是Docker发挥作用的地方。 对于运行我们应用程序的主机，不管是笔记本电脑还是web服务器，我们唯一需要做的就是运行一个docker容器平台。从以后，你就不需要担心你使用的是MacOS，Ubuntu，Arch还是其他。你只需定义一次应用，即可随时随地运行。")])]),a._v(" "),s("h2",{attrs:{id:"写在前面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[a._v("#")]),a._v(" 写在前面")]),a._v(" "),s("blockquote",[s("p",[a._v("今天我们用 docker 部署我们的仿知乎专栏项目，主要有项目GDColumn、MySQL、Redis。 基于CentOS 8.2系统")])]),a._v(" "),s("p",[s("code",[a._v("项目地址")]),a._v("\nhttps://github.com/AA12GQ/GDColumn")]),a._v(" "),s("p",[a._v("项目后端 "),s("code",[a._v("API")]),a._v("文档\nhttp://bitepig.aa12.cool/swagger/index.html#/")]),a._v(" "),s("p",[a._v("项目结构")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://bitpig-column.oss-cn-hangzhou.aliyuncs.com/AA12/132381205755592705.jpg",alt:""}})]),a._v(" "),s("h1",{attrs:{id:"_1-安装docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装docker"}},[a._v("#")]),a._v(" 1. 安装docker")]),a._v(" "),s("ul",[s("li",[a._v("更新源")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("go yum update\n")])])]),s("ul",[s("li",[a._v("安装docker")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("go yum install docker \n")])])]),s("ul",[s("li",[a._v("启动docker")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("go systemctl start docker\n")])])]),s("ul",[s("li",[a._v("查看是否启动成功")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("go systemctl status docker  \n")])])]),s("p",[s("img",{attrs:{src:"https://bitpig-column.oss-cn-hangzhou.aliyuncs.com/AA12/132381804081446913.jpg",alt:""}})]),a._v(" "),s("ul",[s("li",[a._v("查看所有的镜像")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("go docker images\n")])])]),s("ul",[s("li",[a._v("查看所有的容器状态")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("go docker ps -a\n")])])]),s("h1",{attrs:{id:"_2-镜像启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-镜像启动"}},[a._v("#")]),a._v(" 2. 镜像启动")]),a._v(" "),s("h2",{attrs:{id:"_2-1-mysql"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-mysql"}},[a._v("#")]),a._v(" 2.1 MySQL")]),a._v(" "),s("h3",{attrs:{id:"_2-1-1-拉取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-拉取"}},[a._v("#")]),a._v(" 2.1.1 拉取")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker pull mysql:tag \n")])])]),s("p",[a._v("我这里的"),s("code",[a._v("tag")]),a._v("是mysql 的 "),s("code",[a._v("8.0")]),a._v(" 版本，如果不指定就默认是最新版本\n"),s("img",{attrs:{src:"https://bitpig-column.oss-cn-hangzhou.aliyuncs.com/AA12/132382344039366657.jpg",alt:""}})]),a._v(" "),s("blockquote",[s("p",[a._v("我这里是因为已经拉取了，下面列出拉取成功的例子")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://bitpig-column.oss-cn-hangzhou.aliyuncs.com/AA12/132382530333573121.jpg",alt:""}}),a._v(" "),s("code",[a._v("docker images")]),a._v(" 查看镜像")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://bitpig-column.oss-cn-hangzhou.aliyuncs.com/AA12/132383070425710593.jpg",alt:""}})]),a._v(" "),s("h3",{attrs:{id:"_2-1-2-启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-启动"}},[a._v("#")]),a._v(" 2.1.2 启动")]),a._v(" "),s("p",[a._v("启动mysql容器要保证宿主机的3306没有被占用，或者你也可以用其他端口进行映射，我这里把宿主机的3306端口停了，所以就用3306端口进行映射了。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run --name mysql -v /var/lib/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -p 33061:3306 -d mysql:8.0 \n")])])]),s("p",[a._v("说明一下这些参数")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("--name mysql \n表示将这个容器命名为mysql\n\n-v /var/lib/mysql:/var/lib/mysql \n表示将宿主机的 /var/lib/mysql 卷映射到容器里的 /var/lib/mysql 卷中，这里是为了我们能够把这个数据保存在宿主机中，防止容器删掉就没了。\n\n-e MYSQL_ROOT_PASSWORD=root \n表示MySQL的密码我这里设置了root\n\n-p 33061:3306\n将宿主机的3306端口映射到容器的33061端口\n\n-d \n后台运行\n\nmysql:8.0 \n使用mysql:8.0这个镜像\n")])])]),s("p",[s("img",{attrs:{src:"https://bitpig-column.oss-cn-hangzhou.aliyuncs.com/AA12/132383421975494657.jpg",alt:""}})]),a._v(" "),s("h2",{attrs:{id:"_2-2-redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-redis"}},[a._v("#")]),a._v(" 2.2 Redis")]),a._v(" "),s("h3",{attrs:{id:"_2-2-1-拉取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-拉取"}},[a._v("#")]),a._v(" 2.2.1 拉取")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker pull redis 1 \n")])])]),s("p",[a._v("这里我们没有指定版本，所以是 "),s("code",[a._v("latest")]),a._v(" 最新版本\n"),s("img",{attrs:{src:"https://bitpig-column.oss-cn-hangzhou.aliyuncs.com/AA12/132383561813590017.jpg",alt:""}})]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker images //结果与上方相同 \n")])])]),s("h1",{attrs:{id:"_3-dockerfile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-dockerfile"}},[a._v("#")]),a._v(" 3. Dockerfile")]),a._v(" "),s("p",[s("strong",[s("code",[a._v("注意：某些步骤不是唯一的，可以根据自己的需要修改诸如文件路径、最终可执行文件的名称等")])])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('FROM golang:alpine AS builder\n\n#为我们的镜像设置必要的环境变量\nENV GO111MODULE=on \\\nGOPROXY=https://goproxy.cn,direct \\\nCGO_ENABLED=0 \\\nGOOS=linux \\\nGOARCH=amd64\n\n#镜像作者\nMAINTAINER "AA12GQ"\n\n#移动到工作目录：/build\nWORKDIR /build\n\n#复制项目中的 go.mod 和 go.sum文件并下载依赖信息\nCOPY go.mod .\nCOPY go.sum .\nRUN go mod download\n\n#将代码复制到容器中\nCOPY . .\n\n#将我们的代码编译成二进制可执行文件\nRUN go build -o gdcolumn .\nRUN go run main.go migrate up\n\n###################\n#接下来创建一个小镜像\n###################\nFROM debian:stretch-slim\n\nCOPY .env /\nCOPY ./wait-for.sh /\n\n#从builder镜像中把可执行文件拷贝到当前目录\nCOPY --from=builder /build/gdcolumn /\n\nRUN set -eux \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends netcat \\\n    && chmod 755 wait-for.sh\n\n#需要运行的命令\nENTRYPOINT ["/gdcolumn"]\n')])])]),s("h4",{attrs:{id:"dockerfile解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile解析"}},[a._v("#")]),a._v(" Dockerfile解析")]),a._v(" "),s("h5",{attrs:{id:"from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#from"}},[a._v("#")]),a._v(" From")]),a._v(" "),s("p",[a._v("我们正在使用基础镜像"),s("code",[a._v("golang:alpine")]),a._v("来创建我们的镜像。这和我们要创建的镜像一样是一个我们能够访问的存储在Docker仓库的基础镜像。这个镜像运行的是alpine Linux发行版，该发行版的大小很小并且内置了Go，非常适合我们的用例。有大量公开可用的Docker镜像，请查看https://hub.docker.com/_/golang")]),a._v(" "),s("h5",{attrs:{id:"env"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[a._v("#")]),a._v(" Env")]),a._v(" "),s("p",[a._v("用来设置我们编译阶段需要用的环境变量。")]),a._v(" "),s("h5",{attrs:{id:"workdir-copy-run"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#workdir-copy-run"}},[a._v("#")]),a._v(" WORKDIR，COPY，RUN")]),a._v(" "),s("p",[a._v("这几个命令做的事都写在注释里了，很好理解。")]),a._v(" "),s("h5",{attrs:{id:"export-cmd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#export-cmd"}},[a._v("#")]),a._v(" EXPORT，CMD")]),a._v(" "),s("p",[a._v("最后，我们声明服务端口，因为我们的应用程序监听的是这个端口并通过这个端口对外提供服务。并且我们还定义了在我们运行镜像的时候默认执行的命令"),s("code",[a._v('CMD ["/gdcolumn"]')]),a._v("。")]),a._v(" "),s("ul",[s("li",[a._v("然后将我们的项目git下来")]),a._v(" "),s("li",[a._v("然后进行我们配置的编写")]),a._v(" "),s("li",[a._v("这里注意要填宿主机的ip地址，因为docker是进程隔离的状态，所以我们不能填127.0.0.1！并且要确保这几个端口的安全组已经开了！")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://bitpig-column.oss-cn-hangzhou.aliyuncs.com/AA12/132384658523422721.jpg",alt:""}}),a._v("\n然后我们就可以进行docker build了")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker build -t gdcolumn . \n")])])]),s("p",[a._v("检查每一个step有没有对应的序列号出来，全都有就是成功了。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://bitpig-column.oss-cn-hangzhou.aliyuncs.com/AA12/132384869262032897.jpg",alt:""}})]),a._v(" "),s("p",[a._v("我们跑一下")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker run -d -p 3000:3000 --name gdcolumn gdcolumn \n")])])]),s("p",[a._v("发现没跑起来，所以就")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker logs NAMES  \n")])])]),s("p",[a._v("查看日志，发现mysql忘记创建数据库了 我们docker exec进入mysql中进行数据库表的创建\n"),s("img",{attrs:{src:"https://bitpig-column.oss-cn-hangzhou.aliyuncs.com/AA12/132385099814535169.jpg",alt:""}}),a._v("\n这里创建你项目相对应的数据库就好了 然后重启一下我们的容器 全部up起来就好了")]),a._v(" "),s("h1",{attrs:{id:"_4-docker-compose-yml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-docker-compose-yml"}},[a._v("#")]),a._v(" 4. docker-compose.yml")]),a._v(" "),s("p",[a._v("当我们有多个容器需要启动的时候，我们可以用docker-compose.yml进行容器的管理\n使用Compose基本上是一个三步过程：")]),a._v(" "),s("ol",[s("li",[a._v("使用"),s("code",[a._v("Dockerfile")]),a._v("定义你的应用环境以便可以在任何地方复制。")]),a._v(" "),s("li",[a._v("定义组成应用程序的服务，"),s("code",[a._v("docker-compose.yml")]),a._v(" 以便它们可以在隔离的环境中一起运行。")]),a._v(" "),s("li",[a._v("执行 "),s("code",[a._v("docker-compose up")]),a._v("命令来启动并运行整个应用程序。")]),a._v(" "),s("li",[a._v("示例代码")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('# yaml 配置\nversion: "3.7"\nservices:\n  redis507:\n    image: "redis:5.0.7"\n    ports:\n      - "63791:6379"\n  mysql8019:\n    image: "mysql:8.0.19"\n    ports:\n      - "33061:3306"\n    command: "--default-authentication-plugin=mysql_native_password --init-file /data/application/init.sql"\n    environment:\n      MYSQL_ROOT_PASSWORD: ""\n      MYSQL_DATABASE: "gdcolumn"\n      MYSQL_PASSWORD: ""\n    volumes:\n      - ./init.sql:/data/application/init.sql\n  gdcolumn:\n    build: .\n    volumes:\n      - .env:/GDColumn/.env\n    depends_on:\n      - mysql8019\n      - redis507\n    ports:\n      - "3000:3000"\n    stdin_open: true\n    tty: true\n')])])]),s("p",[a._v("使用")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("docker-compose up //运行 \ndocker-compose up -d //后台运行 \n")])])]),s("p",[a._v("执行以上代码就可以跑起来了")])])}),[],!1,null,null,null);s.default=n.exports}}]);